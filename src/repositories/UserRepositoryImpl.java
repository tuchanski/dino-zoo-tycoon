package repositories;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import exceptions.EntityAlreadyRegisteredException;
import exceptions.EntityNotFoundException;
import models.DB;
import models.User;
import repositories.interfaces.IUserRepository;

public class UserRepositoryImpl implements IUserRepository {

    // IDs are generated by the Database

    private Connection getConnection() throws SQLException {
        return DB.connect();
    }

    @Override
    public void createUser(String username, String password) throws EntityAlreadyRegisteredException {

        boolean usernameIsAvailable = usernameIsAvailable(username);

        if (!usernameIsAvailable) {
            throw new EntityAlreadyRegisteredException("Username already registered");
        }

        String createUserQuery = "INSERT INTO SystemUser (username, password) VALUES (?, ?)";

        try {

            PreparedStatement createUserPs = getConnection().prepareStatement(createUserQuery);
            createUserPs.setString(1, username);
            createUserPs.setString(2, password);

            createUserPs.execute();
            createUserPs.close();

            System.out.println("User " + username + " has been created successfully");

        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }

    }

    @Override
    public List<User> getUsers() {

        List<User> registeredUsers = new ArrayList<>(); // May be empty
        String getUsersQuery = "SELECT * FROM SystemUser";

        try {
            PreparedStatement getUsersPs = getConnection().prepareStatement(getUsersQuery);
            ResultSet rs = getUsersPs.executeQuery();

            while (rs.next()) {
                registeredUsers.add(mapRowToUser(rs));
            }

            rs.close();
            getUsersPs.close();

        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }

        return registeredUsers;
    }

    @Override
    public User getUserById(int id) {

        String getUserByIdQuery = "SELECT * FROM SystemUser WHERE user_id = ?";

        try {
            PreparedStatement getUserByIdPs = getConnection().prepareStatement(getUserByIdQuery);
            getUserByIdPs.setInt(1, id);
            ResultSet rs = getUserByIdPs.executeQuery();

            if (rs.next()) {
                User selectedUser = mapRowToUser(rs);

                getUserByIdPs.close();
                rs.close();

                return selectedUser;
            }

            getUserByIdPs.close();
            rs.close();

        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }

        return null;
    }

    @Override
    public User getUserByUsername(String username) {

        String getUserByUsernameQuery = "SELECT * FROM SystemUser WHERE username = ?";

        try {
            PreparedStatement getUserByUsernamePs = getConnection().prepareStatement(getUserByUsernameQuery);
            getUserByUsernamePs.setString(1, username);
            ResultSet rs = getUserByUsernamePs.executeQuery();

            if (rs.next()) {

                User selectedUser = mapRowToUser(rs);

                getUserByUsernamePs.close();
                rs.close();

                return selectedUser;
            }

            getUserByUsernamePs.close();
            rs.close();

        } catch (SQLException e){
            System.out.println("Error: " + e.getMessage());
        }

        return null;
    }

    @Override
    public User deleteUserById(int id) throws EntityNotFoundException {

        User userToBeDeleted = getUserById(id); // May be null

        try {

            if (userToBeDeleted == null) {
                throw new EntityNotFoundException("User not found with id: " + id);
            }

            String deleteQuery = "DELETE FROM SystemUser WHERE user_id = ?";
            PreparedStatement deletePs = getConnection().prepareStatement(deleteQuery);

            deletePs.setInt(1, id);
            deletePs.execute();
            deletePs.close();

            System.out.println("User: " + userToBeDeleted.getUsername() + " has been deleted");

        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
        
        return userToBeDeleted;
    }

    @Override
    public User updateUserById(int id, String newUsername, String newPassword)
            throws EntityNotFoundException, EntityAlreadyRegisteredException {

        User toBeUpdated = getUserById(id);

        if (toBeUpdated == null) {
            throw new EntityNotFoundException("User not found with id: " + id);
        }

        String updateQuery = "UPDATE SystemUser SET ";
        boolean updateNeeded = false;
        int paramIndex = 1;

        boolean usernameChanged = !newUsername.equals(toBeUpdated.getUsername());
        boolean passwordChanged = !newPassword.equals(toBeUpdated.getPassword());

        if (usernameChanged && !usernameIsAvailable(newUsername)) {
            throw new EntityAlreadyRegisteredException("Username already registered");
        }

        if (usernameChanged) {
            updateQuery += "username = ?";
            updateNeeded = true;
        }

        if (passwordChanged) {
            updateQuery += updateNeeded ? ", password = ?" : "password = ?";
            updateNeeded = true;
        }

        if (!updateNeeded) {
            return toBeUpdated;
        }

        updateQuery += " WHERE user_id = ?";

        try (PreparedStatement updatePs = getConnection().prepareStatement(updateQuery)) {

            if (usernameChanged) {
                updatePs.setString(paramIndex++, newUsername);
            }

            if (passwordChanged) {
                updatePs.setString(paramIndex++, newPassword);
            }

            updatePs.setInt(paramIndex, id);
            updatePs.executeUpdate();

        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }

        return toBeUpdated;
    }

    private boolean usernameIsAvailable(String username) {

        String checkQuery = "SELECT COUNT(*) FROM SystemUser WHERE username = ?";

        try {
            PreparedStatement checkPs = getConnection().prepareStatement(checkQuery);
            checkPs.setString(1, username);
            ResultSet rs = checkPs.executeQuery();

            while (rs.next()){
                if (rs.getInt(1) > 0) {
                    rs.close();
                    checkPs.close();
                    return false;
                }
            }

            rs.close();
            checkPs.close();

        } catch (SQLException e){
            System.out.println("Error: " + e.getMessage());
        }
        return true;
    }

    private User mapRowToUser(ResultSet rs) throws SQLException {
        Long userId = rs.getLong("user_id");
        String username = rs.getString("username");
        String password = rs.getString("password");
        return new User(userId, username, password);
    }

}
